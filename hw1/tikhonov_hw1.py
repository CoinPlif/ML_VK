# -*- coding: utf-8 -*-
"""tikhonov_hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18byYeFZalRXvpzm4aq-aQMyMBxI0dQmg

# Машинное обучение
## Домашнее задание №1: KNN + Линейные модели

**Срок сдачи:** 5 марта 2023, 23:59

**Максимально баллов:** 10

**Штраф за опоздание:** по 2 балла за 24 часа задержки. Через 5 дней домашнее задание сгорает.

При отправлении ДЗ указывайте фамилию в названии файла. Формат сдачи будет указан чуть позже.

Используйте данный Ipython Notebook при оформлении домашнего задания.

**Штрафные баллы:**

1. Отсутствие фамилии в имени скрипта (скрипт должен называться по аналогии со stroykova_hw1.ipynb) -1 баллов
2. Все строчки должны быть выполнены. Нужно, чтобы output команды можно было увидеть уже в git'е. В противном случае -1 баллов

При оформлении ДЗ нужно пользоваться данным файлом в качестве шаблона. Не нужно удалять и видоизменять написанный код и текст, если явно не указана такая возможность.

## KNN (5 баллов)
"""

import numpy as np
import matplotlib.pyplot as plt

import seaborn as sns
from sklearn import datasets
from sklearn.base import BaseEstimator
from sklearn.datasets import fetch_20newsgroups

from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier, KDTree
from sklearn.metrics import accuracy_score

from collections import Counter

"""##### Задание 1 (1 балл)
Реализовать KNN в классе MyKNeighborsClassifier (обязательное условие: точность не ниже sklearn реализации)
Разберитесь самостоятельно, какая мера расстояния используется в KNeighborsClassifier дефолтно и реализуйте свой алгоритм именно с этой мерой.
Для подсчета расстояний можно использовать функции [отсюда](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html)
"""

class MyKNeighborsClassifier(BaseEstimator):

    def __init__(self, n_neighbors, algorithm='brute'):
        self.n_neighbors = n_neighbors
        self.algorithm = algorithm

    def fit(self, X, y):
        self.X = X
        self.y = y
        if self.algorithm == "kd_tree":
           self.tree = KDTree(X, leaf_size = 2)

    def predict(self, X):

        ans = []
        if self.algorithm == "brute":
            for X_idx in X:

                X_matrix = np.zeros(self.X.shape) + X_idx
                dist_matrix = np.sum(np.square(self.X - X_matrix), axis = 1)
                stacked_matrix = np.stack((dist_matrix, self.y), axis=-1)
                sorted_matrix = stacked_matrix[np.argsort(stacked_matrix[:, 0])]

                cnt = Counter(sorted_matrix[:self.n_neighbors,1])

                ans.append(cnt.most_common(1)[0][0])

        if self.algorithm == "kd_tree":
            dis, ind = self.tree.query(X, k=self.n_neighbors)
            for neighbors_idx in ind:
                cnt = Counter(self.y[neighbors_idx])
                ans.append(cnt.most_common(1)[0][0])
        return ans

"""**IRIS**

В библиотеке scikit-learn есть несколько датасетов из коробки. Один из них [Ирисы Фишера](https://ru.wikipedia.org/wiki/%D0%98%D1%80%D0%B8%D1%81%D1%8B_%D0%A4%D0%B8%D1%88%D0%B5%D1%80%D0%B0)
"""

iris = datasets.load_iris()

X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1, stratify=iris.target)

clf = KNeighborsClassifier(n_neighbors=2, algorithm='brute')
my_clf = MyKNeighborsClassifier(n_neighbors=2, algorithm='brute')

clf.fit(X_train, y_train)
my_clf.fit(X_train, y_train)

sklearn_pred = clf.predict(X_test)
my_clf_pred = my_clf.predict(X_test)
assert abs( accuracy_score(y_test, my_clf_pred) -  accuracy_score(y_test, sklearn_pred ) )<0.005, "Score must be simillar"

"""**Задание 2 (0.5 балла)**

Давайте попробуем добиться скорости работы на fit, predict сравнимой со sklearn для iris. Допускается замедление не более чем в 2 раза.
Для этого используем numpy.
"""

# Commented out IPython magic to ensure Python compatibility.
# %timeit clf.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %timeit my_clf.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %timeit clf.predict(X_test)

# Commented out IPython magic to ensure Python compatibility.
# %timeit my_clf.predict(X_test)

"""###### Задание 3 (1 балл)
Добавьте algorithm='kd_tree' в реализацию KNN (использовать KDTree из sklearn.neighbors). Необходимо добиться скорости работы на fit,  predict сравнимой со sklearn для iris. Допускается замедление не более чем в 2 раза.
Для этого используем numpy. Точность не должна уступать значению KNN из sklearn.
"""

clf = KNeighborsClassifier(n_neighbors=2, algorithm='kd_tree')
my_clf = MyKNeighborsClassifier(n_neighbors=2, algorithm='kd_tree')

X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1, stratify=iris.target)

# Commented out IPython magic to ensure Python compatibility.
# %time clf.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %time my_clf.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %time clf.predict(X_test)

# Commented out IPython magic to ensure Python compatibility.
# %time my_clf.predict(X_test)

sklearn_pred = clf.predict(X_test)
my_clf_pred = my_clf.predict(X_test)
assert abs( accuracy_score(y_test, my_clf_pred) -  accuracy_score(y_test, sklearn_pred ) )<0.005, "Score must be simillar"

"""**Задание 4 (2.5 балла)**

Рассмотрим новый датасет 20 newsgroups
"""

newsgroups = fetch_20newsgroups(subset='train',remove=['headers','footers', 'quotes'])

data = newsgroups['data']
target = newsgroups['target']

"""Преобразуйте текстовые данные из data с помощью [CountVectorizer](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html). Словарь можно ограничить по частотности."""

cvec = CountVectorizer(min_df = 0.05)
X = cvec.fit_transform(data).toarray()

target_cv = target.reshape(-1, 1)

df = np.hstack((X, target_cv))

"""*Так мы получили векторное представление наших текстов. Значит можно приступать к задаче обучения модели*

Реализуйте разбиение выборки для кросс-валидации на 3 фолдах. Разрешено использовать sklearn.cross_validation
"""

kf = KFold(n_splits=3)

for i, (train_index, test_index) in enumerate(kf.split(X)):
    print(f"Fold {i}:")
    print(f"  Train: index={train_index}")
    print(f"  Test:  index={test_index}")

"""Напишите метод, позволяющий найти оптимальное количество ближайших соседей(дающее максимальную точность в среднем на валидации на 3 фолдах).
Постройте график зависимости средней точности от количества соседей. Можно рассмотреть число соседей от 1 до 10.
"""

def visualize(avg_acc, metric, preprocess):
    plt.plot(range(1, 11), avg_acc)
    plt.ylabel("Avg Accuracy")
    plt.xlabel("Neighbors number")
    plt.title(f"with {preprocess} and {metric}")

def find_best_n(data, preprocess, metrica = "minkowski"):
    avg_acc = []
    for k in range(1,11):
        cv_acc = []
        for train_index, test_index in kf.split(X):

            X_train, X_test, y_train, y_test = data[train_index, :-1], data[train_index, -1], data[test_index, :-1], data[test_index, -1]

            clf = KNeighborsClassifier(n_neighbors=k, metric = metrica)
            clf.fit(X_train, X_test)
            pred = clf.predict(y_train)

            cv_acc.append(accuracy_score(y_test, pred))
        avg_acc.append(sum(cv_acc)/3)

    best_k = np.argmax(np.array(avg_acc))+1
    visualize(avg_acc, metrica, preprocess)
    return best_k

find_best_n(df, preprocess = "Vectorizer")

"""Как изменится качество на валидации, если:

1. Используется косинусная метрика вместо евклидовой.
2. К текстам применяется TfIdf векторизацию( sklearn.feature_extraction.text.TfidfVectorizer)

Сравните модели, выберите лучшую.
"""

find_best_n(df, preprocess = "Vectorizer", metrica = "cosine")

cvec = TfidfVectorizer(min_df = 0.05)
X = cvec.fit_transform(data).toarray()

target_cv = target.reshape(-1, 1)

df = np.hstack((X, target_cv))

find_best_n(df, preprocess = "TfIdf")

find_best_n(df, preprocess = "TfIdf", metrica = "cosine")

"""Лучшая модель получилась с кодирование TfIdf и мерой косинусного расстояния и 1 соседом.

Такая модель показала 0.225 качества accuracy

Загрузим  теперь test  часть нашей выборки и преобразуем её аналогично с train частью. Не забудьте, что наборы слов в train и test части могут отличаться.
"""

X_train, X_test = df[:,:-1], df[:, -1]

clf_knn = KNeighborsClassifier(n_neighbors=1, metric="cosine")

clf_knn.fit(X_train, X_test)

newsgroups = fetch_20newsgroups(subset='test',remove=['headers','footers', 'quotes'])

test_data = newsgroups['data']
test_target = newsgroups['target']

test = cvec.transform(test_data).toarray()

pred = clf_knn.predict(test)

"""Оценим точность вашей лучшей модели на test части датасета. Отличается ли оно от кросс-валидации? Попробуйте сделать выводы, почему отличается качество."""

accuracy_score(test_target, pred)

"""Качество получилось меньше чем на трейне, потому что в тексте были слова, которые до этого не встречались и эти признаки не были рассмотрены => меньше признаков => хуже модель. Тут же есть и обратная ситуация: есть слова, которые встречались в трейне, но ни разу не встречались в тесте, что уменьшает ценность признаков => меньше полезных признаков => хуже модель.

# Линейные модели (5 баллов)
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# %matplotlib inline

plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (12,5)

"""В этом задании мы будем реализовать линейные модели. Необходимо реализовать линейную и логистическую регрессии с L2 регуляризацией

### Теоретическое введение



Линейная регрессия решает задачу регрессии и оптимизирует функцию потерь MSE

$$L(w) =  \frac{1}{N}\left[\sum_i (y_i - a_i) ^ 2 \right], $$ где $y_i$ $-$ целевая функция,  $a_i = a(x_i) =  \langle\,x_i,w\rangle ,$ $-$ предсказание алгоритма на объекте $x_i$, $w$ $-$ вектор весов (размерности $D$), $x_i$ $-$ вектор признаков (такой же размерности $D$).

Не забываем, что здесь и далее  мы считаем, что в $x_i$ есть тождественный вектор единиц, ему соответствует вес $w_0$.


Логистическая регрессия является линейным классификатором, который оптимизирует так называемый функционал log loss:

$$L(w) = - \frac{1}{N}\left[\sum_i y_i \log a_i + ( 1 - y_i) \log (1 - a_i) \right],$$
где  $y_i  \in \{0,1\}$ $-$ метка класса, $a_i$ $-$ предсказание алгоритма на объекте $x_i$. Модель пытается предсказать апостериорую вероятность объекта принадлежать к классу "1":
$$ p(y_i = 1 | x_i) = a(x_i) =  \sigma( \langle\,x_i,w\rangle ),$$
$w$ $-$ вектор весов (размерности $D$), $x_i$ $-$ вектор признаков (такой же размерности $D$).

Функция $\sigma(x)$ $-$ нелинейная функция, пероводящее скалярное произведение объекта на веса в число $\in (0,1)$ (мы же моделируем вероятность все-таки!)

$$\sigma(x) = \frac{1}{1 + \exp(-x)}$$

Если внимательно посмотреть на функцию потерь, то можно заметить, что в зависимости от правильного ответа алгоритм штрафуется или функцией $-\log a_i$, или функцией $-\log (1 - a_i)$.



Часто для решения проблем, которые так или иначе связаны с проблемой переобучения, в функционал качества добавляют слагаемое, которое называют ***регуляризацией***. Итоговый функционал для линейной регрессии тогда принимает вид:

$$L(w) =  \frac{1}{N}\left[\sum_i (y_i - a_i) ^ 2 \right] + \frac{1}{C}R(w) $$

Для логистической:
$$L(w) = - \frac{1}{N}\left[\sum_i y_i \log a_i + ( 1 - y_i) \log (1 - a_i) \right] +  \frac{1}{C}R(w)$$

Самое понятие регуляризации введено основателем ВМК академиком Тихоновым https://ru.wikipedia.org/wiki/Метод_регуляризации_Тихонова

Идейно методика регуляризации заключается в следующем $-$ мы рассматриваем некорректно поставленную задачу (что это такое можно найти в интернете), для того чтобы сузить набор различных вариантов (лучшие из которых будут являться переобучением ) мы вводим дополнительные ограничения на множество искомых решений. На лекции Вы уже рассмотрели два варианта регуляризации.

$L1$ регуляризация:
$$R(w) = \sum_{j=1}^{D}|w_j|$$
$L2$ регуляризация:
$$R(w) =  \sum_{j=1}^{D}w_j^2$$

С их помощью мы ограничиваем модель в  возможности выбора каких угодно весов минимизирующих наш лосс, модель уже не сможет подстроиться под данные как ей угодно.

Вам нужно добавить соотвествущую Вашему варианту $L2$ регуляризацию.

И так, мы поняли, какую функцию ошибки будем минимизировать, разобрались, как получить предсказания по объекту и обученным весам. Осталось разобраться, как получить оптимальные веса. Для этого нужно выбрать какой-то метод оптимизации.



Градиентный спуск является самым популярным алгоритмом обучения линейных моделей. В этом задании Вам предложат реализовать стохастический градиентный спуск или  мини-батч градиентный спуск (мини-батч на русский язык довольно сложно перевести, многие переводят это как "пакетный", но мне не кажется этот перевод удачным). Далее нам потребуется определение **эпохи**.
Эпохой в SGD и MB-GD называется один проход по **всем** объектам в обучающей выборки.
* В SGD градиент расчитывается по одному случайному объекту. Сам алгоритм выглядит примерно так:
        1) Перемешать выборку
        2) Посчитать градиент функции потерь на одном объекте (далее один объект тоже будем называть батчем)
        3) Сделать шаг спуска
        4) Повторять 2) и 3) пока не пройдет максимальное число эпох.
* В Mini Batch SGD - по подвыборке объектов. Сам алгоритм выглядит примерно так::
        1) Перемешать выборку, выбрать размер мини-батча (от 1 до размера выборки)
        2) Почитать градиент функции потерь по мини-батчу (не забыть поделить на  число объектов в мини-батче)
        3) Сделать шаг спуска
        4) Повторять 2) и 3) пока не пройдет максимальное число эпох.
* Для отладки алгоритма реализуйте возможность  вывода средней ошибки на обучении модели по объектам (мини-батчам). После шага градиентного спуска посчитайте значение ошибки на объекте (или мини-батче), а затем усредните, например, по ста шагам. Если обучение проходит корректно, то мы должны увидеть, что каждые 100 шагов функция потерь уменьшается.
* Правило останова - максимальное количество эпох

## Зачем нужны батчи?


Как Вы могли заметить из теоретического введения, что в случае SGD, что в случа mini-batch GD,  на каждой итерации обновление весов  происходит только по небольшой части данных (1 пример в случае SGD, batch примеров в случае mini-batch). То есть для каждой итерации нам *** не нужна вся выборка***. Мы можем просто итерироваться по выборке, беря батч нужного размера (далее 1 объект тоже будем называть батчом).

Легко заметить, что в этом случае нам не нужно загружать все данные в оперативную память, достаточно просто считать батч с диска, обновить веса, считать диска другой батч и так далее. В целях упрощения домашней работы, прямо с диска  мы считывать не будем, будем работать с обычными numpy array.





## Немножко про генераторы в Python



Идея считывания данных кусками удачно ложится на так называемые ***генераторы*** из языка Python. В данной работе Вам предлагается не только разобраться с логистической регрессией, но  и познакомиться с таким важным элементом языка.  При желании Вы можете убрать весь код, связанный с генераторами, и реализовать логистическую регрессию и без них, ***штрафоваться это никак не будет***. Главное, чтобы сама модель была реализована правильно, и все пункты были выполнены.

Подробнее можно почитать вот тут https://anandology.com/python-practice-book/iterators.html


К генератору стоит относиться просто как к функции, которая порождает не один объект, а целую последовательность объектов. Новое значение из последовательности генерируется с помощью ключевого слова ***yield***.

Концепция крайне удобная для обучения  моделей $-$ у Вас есть некий источник данных, который Вам выдает их кусками, и Вам совершенно все равно откуда он их берет. Под ним может скрывать как массив в оперативной памяти, как файл на жестком диске, так и SQL база данных. Вы сами данные никуда не сохраняете, оперативную память экономите.

Если Вам понравилась идея с генераторами, то Вы можете реализовать свой, используя прототип batch_generator. В нем Вам нужно выдавать батчи признаков и ответов для каждой новой итерации спуска. Если не понравилась идея, то можете реализовывать SGD или mini-batch GD без генераторов.
"""

def batch_generator(X, y, shuffle=True, batch_size=1):
    """
    Гератор новых батчей для обучения
    X          - матрица объекты-признаки
    y          - вектор ответов
    shuffle    - нужно ли случайно перемешивать выборку
    batch_size - размер батча ( 1 это SGD, > 1 mini-batch GD)
    Генерирует подвыборку для итерации спуска (X_batch, y_batch)
    """

    for i in range(X.shape[0]//batch_size):
        batch_indeces = np.random.choice(X.shape[0], size = batch_size, replace = False)
        X_batch = X[batch_indeces]
        y_batch = y[batch_indeces]
        yield (X_batch, y_batch)

# Теперь можно сделать генератор по данным ()
# my_batch_generator = batch_generator(X, y, shuffle=True, batch_size=5)

#%%pycodestyle

def sigmoid(x):
    """
    Вычисляем значение сигмоида.
    X - выход линейной модели
    """

    sigm_value_x = 1/(1+np.exp(-x))

    return sigm_value_x


from sklearn.base import BaseEstimator, ClassifierMixin

class MySGDClassifier(BaseEstimator, ClassifierMixin):

    def __init__(self, batch_generator, batch_size=1, C=1, alpha=0.01, max_epoch=10, model_type='lin_reg'):
        """
        batch_generator -- функция генератор, которой будем создавать батчи
        C - коэф. регуляризации
        alpha - скорость спуска
        max_epoch - максимальное количество эпох
        model_type - тим модели, lin_reg или log_reg
        """

        self.C = C
        self.alpha = alpha
        self.max_epoch = max_epoch
        self.batch_generator = batch_generator
        self.errors_log = {'iter' : [], 'loss' : []}
        self.model_type = model_type
        self.batch_size = batch_size

    def calc_loss(self, X_batch, y_batch):
        """
        Считаем функцию потерь по батчу
        X_batch - матрица объекты-признаки по батчу
        y_batch - вектор ответов по батчу
        Не забудте тип модели (линейная или логистическая регрессия)!
        """

        if self.model_type == "lin_reg":
            pred = X_batch@self.weights
            loss = np.sum(np.square(pred - y_batch))/X_batch.shape[0] \
                   + self.C*(np.sum(self.weights[:-1]@self.weights[:-1]))

        if self.model_type == "log_reg":
            pred = sigmoid(X_batch@self.weights)
            loss = -np.sum(y_batch*np.log(pred) + np.log(1 - pred)*(1 - y_batch))/X_batch.shape[0] \
                   + self.C*(np.sum(self.weights[:-1]@self.weights[:-1]))

        return loss

    def calc_loss_grad(self, X_batch, y_batch):
        """
        Считаем  градиент функции потерь по батчу (то что Вы вывели в задании 1)
        X_batch - матрица объекты-признаки по батчу
        y_batch - вектор ответов по батчу
        Не забудте тип модели (линейная или логистическая регрессия)!
        """

        w_without_bias = self.weights.copy()
        w_without_bias[-1] = 0

        if self.model_type == "lin_reg":

            loss_grad = X_batch.T@(X_batch@self.weights-y_batch)*2/X_batch.shape[0] \
                        + 2*self.C*w_without_bias

        if self.model_type == "log_reg":
            loss_grad = X_batch.T@(sigmoid(X_batch@self.weights) - y_batch)/X_batch.shape[0] \
                        + 2*self.C*w_without_bias

        return loss_grad

    def update_weights(self, new_grad):
        """
        Обновляем вектор весов
        new_grad - градиент по батчу
        """
        self.weights = np.subtract(self.weights, self.alpha*new_grad)

    def fit(self, X, y):
        '''
        Обучение модели
        X - матрица объекты-признаки
        y - вектор ответов
        '''
        X = np.hstack([X, np.ones([X.shape[0], 1])])
        self.weights = np.ones(X.shape[1])
        iter = 0
        for n in range(self.max_epoch):
            new_epoch_generator = self.batch_generator(X, y, shuffle=True, batch_size=self.batch_size)
            for new_batch in new_epoch_generator:
                X_batch = new_batch[0]
                y_batch = new_batch[1]
                batch_grad = self.calc_loss_grad(X_batch, y_batch)
                self.update_weights(batch_grad)
                batch_loss = self.calc_loss(X_batch, y_batch)
                iter += 1
                self.errors_log['iter'].append(iter)
                self.errors_log['loss'].append(batch_loss)
                #print(clf.weights)


        return self

    def predict(self, X):
        '''
        Предсказание класса
        X - матрица объекты-признаки
        Не забудте тип модели (линейная или логистическая регрессия)!
        '''

        X = np.hstack([X, np.ones([X.shape[0], 1])])
        if self.model_type == "lin_reg":
            y_hat = X@self.weights
        if self.model_type == "log_reg":
            y_hat = sigmoid(X@self.weights)
        return y_hat

"""Запустите обе регрессии на синтетических данных.


Выведите полученные веса и нарисуйте разделяющую границу между классами (используйте только первых два веса для первых двух признаков X[:,0], X[:,1] для отображения в 2d пространство ).  
"""

clf_lin = MySGDClassifier(model_type = "lin_reg", batch_generator = batch_generator, C = 0, alpha = 2e-2, batch_size=20, max_epoch = 100)
clf_log = MySGDClassifier(model_type = "log_reg", batch_generator = batch_generator, C = 0, alpha = 2e-2, batch_size=20, max_epoch = 100)

def plot_decision_boundary(clf):
    x = np.arange(-5, 8, 0.1)
    y = -clf.weights[0]/clf.weights[1]*x - clf.weights[2]/clf.weights[1]
    col = (np.random.random (), np.random.random (), np.random.random ())
    plt.plot(x, y, c = col, label = clf.model_type)
    plt.legend()

np.random.seed(0)

C1 = np.array([[0., -0.8], [1.5, 0.8]])
C2 = np.array([[1., -0.7], [2., 0.7]])
gauss1 = np.dot(np.random.randn(200, 2) + np.array([5, 3]), C1)
gauss2 = np.dot(np.random.randn(200, 2) + np.array([1.5, 0]), C2)

X = np.vstack([gauss1, gauss2])
y = np.r_[np.ones(200), np.zeros(200)]
clf_lin.fit(X, y)
clf_log.fit(X, y)
plot_decision_boundary(clf_lin)
plot_decision_boundary(clf_log)

plt.scatter(X[:,0], X[:,1], c=y)

def loss_plot(arr_clf, N = 1):
    plt.figure(figsize = (len(arr_clf)*5, 10))
    for idx, clf in enumerate(arr_clf):
        plt.subplot(2, len(arr_clf)//2, idx+1)
        error_reshaped = np.array(clf.errors_log["loss"]).reshape((len(clf.errors_log["loss"])//N, N))
        error_reshaped.mean(axis = 1)
        plt.plot(clf.errors_log["iter"], clf.errors_log["loss"])
        plt.xlabel("Iterations")
        plt.ylabel("Loss")
        plt.title(f"{clf.model_type}, alpha={clf.alpha}, C = {clf.C}")

loss_plot([clf_log, clf_lin])

"""Далее будем анализировать Ваш алгоритм.
Для этих заданий используйте датасет ниже.
"""

from sklearn.datasets import make_classification

X, y = make_classification(n_samples=100000, n_features=10,
                           n_informative=4, n_redundant=0,
                           random_state=123, class_sep=1.0,
                           n_clusters_per_class=1)

X.shape

"""Покажите сходимости обеих регрессией на этом датасете: изобразите график  функции потерь, усредненной по $N$ шагам градиентого спуска, для разных `alpha` (размеров шага). Разные `alpha` расположите на одном графике.

$N$ можно брать 10, 50, 100 и т.д.
"""

from tqdm import tqdm

clfs = []
for model_type in ["lin_reg", "log_reg"]:
    for alpha in tqdm([1e-1, 1e-2, 1e-3, 8e-4, 3e-4]):
        clf = MySGDClassifier(model_type = model_type, batch_generator = batch_generator, C = 0, alpha = alpha, batch_size=1000, max_epoch = 2)
        clf.fit(X, y)
        clfs.append(clf)

loss_plot(clfs, N = 100)

"""Видна закономерная картина: Там где градиентный шаг (alpha) побольше => обучение быстрее. Там где шаг меньше => на разных объектах изменения градиента незначительное, поэтому лосс сильно скачет, а модель почти не обучается


**Из графиков выше следует, что стоит выбрать значение alpha = 0.1 или 0.01 (далее будет использовано alpha = 0.01)**

Что Вы можете сказать про сходимость метода при различных `alpha`? Какое значение стоит выбирать для лучшей сходимости?

Изобразите график среднего значения весов для обеих регрессий в зависимости от коеф. регуляризации С из `np.logspace(3, -3, 10)`
"""

1/np.logspace(3, -3, 10)

clfs = []
for model_type in ["lin_reg", "log_reg"]:
    for C in tqdm(np.logspace(3, -3, 10)[::-1]): # будет 1/С, потому что в коде регрессий в формуле использовался обратный C, чтобы избежать деление на 0
        clf = MySGDClassifier(model_type = model_type, batch_generator = batch_generator, C = C, alpha = 0.01, batch_size=1000, max_epoch = 2)
        clf.fit(X, y)
        clfs.append(clf)

def avg_weights(arr_clf):
    x, y = [], []
    for clf in arr_clf:
        x.append(clf.C)
        y.append(clf.weights.mean())
        print(f"C = {clf.C}, weights = {clf.weights.mean()}, model_type = {clf.model_type}")
    plt.plot(x[:10], y[:10], label = "lin_reg")
    plt.scatter(x[:10], y[:10], s = 10)
    plt.plot(x[10:], y[10:], label = "log_reg")
    plt.scatter(x[10:], y[10:], s = 10)
    plt.xlabel("C")
    plt.ylabel("avg_weigts")
    plt.legend()

avg_weights(clfs)

"""Довольны ли Вы, насколько сильно уменьшились Ваши веса?

Как видно из графика и из выведенных значений, при большом коэффециенте регуляризации проиходит взрыв весов. Одновременно с этим, когда коффециент маленький, то регуляризации почти нет => средний модуль весов больше, чем при большем коэффециенте(очевидно)
"""